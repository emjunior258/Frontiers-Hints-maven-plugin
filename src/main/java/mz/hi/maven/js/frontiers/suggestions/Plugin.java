package mz.hi.maven.js.frontiers.suggestions;


import mz.co.hi.web.meta.Frontier;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.model.Dependency;
import org.apache.maven.model.Resource;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.jboss.jandex.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Mojo(name = "frshints", defaultPhase = LifecyclePhase.COMPILE)
public class Plugin extends AbstractMojo {

    @Parameter(readonly = true, defaultValue = "${project}")
    private MavenProject project;

    private Indexer indexer = new Indexer();

    private List<File> getClazzFiles(File directory){

        List<File> clazzFiles = new ArrayList<File>();
            File[] files = directory.listFiles();

            for(File file : files){

                if(file.isDirectory()) {

                    clazzFiles.addAll(getClazzFiles(file));
                    continue;

                }

                if(file.getName().endsWith(".class")){

                    clazzFiles.add(file);

                }

            }

        return clazzFiles;

    }

    private String indexClasses() throws MojoFailureException {

        Indexer indexer = new Indexer();

        List<File> clazzFiles = getClazzFiles(new File(project.getBuild().getOutputDirectory()));


        for (File file : clazzFiles) {

            try {

                indexer.index(new FileInputStream(file));

            }catch (IOException ex){

                throw new MojoFailureException("Failed to index class file <"+file.getAbsolutePath()+">",ex);

            }

        }

        Index index = indexer.complete();
        List<AnnotationInstance> instances = index.getAnnotations(DotName.createSimple(Frontier.class.getName()));

        StringBuilder stringBuilder = new StringBuilder();

        for(AnnotationInstance instance : instances){

            ClassInfo classInfo = instance.target().asClass();
            stringBuilder.append("\n"+generateClosure(classInfo));

        }

        return stringBuilder.toString();

    }

    private String generateClosure(ClassInfo classInfo){

        StringBuilder stringBuilder = new StringBuilder();
        String clazz = "var "+classInfo.name().local()+" = {};";
        stringBuilder.append(clazz);

        List<MethodInfo> methodInfos = classInfo.methods();
        for(MethodInfo methodInfo: methodInfos){

            if(methodInfo.name().indexOf("<")!=-1)
                continue;

            String function = classInfo.name().local()+
                    "."+methodInfo.name()+" =  function("+params(methodInfo.parameters().size())+"){};";
            stringBuilder.append("\n"+function);

        }

        return stringBuilder.toString();

    }

    private String params(int total){

        if(total<1)
            return "";

        StringBuilder stringBuilder = new StringBuilder();
        for(int i=0;i<total;){

            int j = i;
            String pName = "p"+String.valueOf(++i);

            if(j>0)
                stringBuilder.append(","+pName);
            else
                stringBuilder.append(pName);

        }

        return stringBuilder.toString();

    }


    public void execute() throws MojoExecutionException, MojoFailureException {

        String directory = project.getBuild().getSourceDirectory();

        String metaPath = directory+"/Hi-INF";
        File metaDirectory = new File(metaPath);

        String uniqueName = project.getArtifact().getGroupId()+"."+project.getArtifact().getArtifactId();
        String path = metaPath+"/"+uniqueName.toLowerCase()+".js";
        getLog().info("Creating Frontiers Hints File : "+path);

        File file = new File(path);



        try {

            if(!metaDirectory.exists())
                metaDirectory.mkdir();

            if(file.exists())
                file.delete();

                file.createNewFile();

        }catch (IOException ex){

            throw new MojoFailureException("Failed to create Frontiers Hints File at "+path,ex);

        }


        try {

            FileOutputStream fout = new FileOutputStream(file);
            PrintStream ps = new PrintStream(fout);
            ps.println("/*" +
                    "This script file was automatically generated by Hi-framework Frontiers-Hints MAVEN Plugin.\n" +
                    "It is intended to be read by smart IDEs in order to enable hinting on frontier methods invocations.\n" +
                    "Do not edit the file. It is generated during maven build lifecycle. Check the Frontiers-Hints documentation\n" +
                    "for more information." +
                    "*/");
            ps.println(indexClasses());
            ps.flush();
            ps.close();


        }catch (IOException ex){

            throw new MojoFailureException("Failed to write on suggestions file : "+path,ex);

        }


    }
}
